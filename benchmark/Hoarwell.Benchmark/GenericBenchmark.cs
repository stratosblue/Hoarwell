// <Auto-Generated/>

using System.Text;
using BenchmarkDotNet.Attributes;
using Hoarwell.Benchmark;

namespace Hoarwell;

[SimpleJob]
[MemoryDiagnoser]
public class GenericBenchmark
{
    private ServerBaseOnHoarwell _serverBaseOnHoarwell;
    private ServerBaseOnDotNetty _serverBaseOnDotNetty;

    private ClientBaseOnHoarwell _clientBaseOnHoarwell;
    private ClientBaseOnDotNetty _clientBaseOnDotNetty;

    public const int HoarwellPort = 11234;
    public const int DotNettyPort = 11235;

    private readonly Dictionary<int, byte[]> _dataCache = [];

    [Params(1, 100)]
    public int EchoCount { get; set; }

    [Params(32, 1024)]
    public int DataSize { get; set; }

    public GenericBenchmark()
    {
        _dataCache.Add(32, BuildData(32));
        _dataCache.Add(1024, BuildData(1024));
    }

    [Benchmark]
    public async Task Hoarwell()
    {
        var data = _dataCache[DataSize];
        for (int i = 0; i < EchoCount; i++)
        {
            await _clientBaseOnHoarwell.WriteAndFlushAsync(new EchoData() { Id = i, Data = data });
        }

        await _clientBaseOnHoarwell.WaitCompleteAndResetAsync();
    }

    [Benchmark(Baseline = true)]
    public async Task DotNetty()
    {
        var data = _dataCache[DataSize];
        for (int i = 0; i < EchoCount; i++)
        {
            await _clientBaseOnDotNetty.WriteAndFlushAsync(new EchoData() { Id = i, Data = data });
        }

        await _clientBaseOnDotNetty.WaitCompleteAndResetAsync();
    }

    [GlobalSetup]
    public void GlobalSetup()
    {
        Console.WriteLine("----------------------------------------- GlobalSetup -----------------------------------------");
        GlobalSetup().Wait();

        async Task GlobalSetup()
        {
            _serverBaseOnHoarwell = new ServerBaseOnHoarwell();
            _serverBaseOnDotNetty = new ServerBaseOnDotNetty();

            await Task.WhenAll(_serverBaseOnHoarwell.StartAsync(HoarwellPort), _serverBaseOnDotNetty.StartAsync(DotNettyPort));

            _clientBaseOnHoarwell = new ClientBaseOnHoarwell();
            _clientBaseOnDotNetty = new ClientBaseOnDotNetty();

            await Task.WhenAll(_clientBaseOnHoarwell.StartAsync(HoarwellPort, EchoCount), _clientBaseOnDotNetty.StartAsync(DotNettyPort, EchoCount));
        }
    }

    [GlobalCleanup]
    public void GlobalCleanup()
    {
        Console.WriteLine("----------------------------------------- GlobalCleanup -----------------------------------------");
        GlobalCleanup().Wait();

        async Task GlobalCleanup()
        {
            await _serverBaseOnHoarwell.DisposeAsync();
            await _serverBaseOnDotNetty.DisposeAsync();

            await _clientBaseOnHoarwell.DisposeAsync();
            await _clientBaseOnDotNetty.DisposeAsync();
        }
    }

    private static byte[] BuildData(int size)
    {
        var data = new byte[size];
        Random.Shared.NextBytes(data);
        return data;
    }
}
